using JobManagement.DotNet.Data;
using JobManagement.DotNet.Modals.Entities;
using JobManagement.DotNet.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Diagnostics.Metrics;
using System.Threading.Tasks;

namespace JobManagement.DotNet.Controllers
{
    [ApiController]
    [Route("api/v1/locations")] // Route for managing locations
    public class LocationController : ControllerBase
    {
        private readonly ApplicationDbContext dbContext;

        public LocationController(ApplicationDbContext dbContext)
        {
            this.dbContext = dbContext;
        }

        [HttpGet] // fetch all locations existing in the system 
        public async Task<ActionResult<IEnumerable<Location>>> GetAllLocations()
        {
            var locations = await dbContext.Locations.ToListAsync();
            return Ok(locations);
        }

        [HttpGet("{id}")] // Fetch particular Location details by the Location id 
        public async Task<IActionResult> GetLocationById(int id)
        {
            try
            {
                var Locations = await dbContext.Locations.FirstOrDefaultAsync(j => j.Id == id);

                if (Locations == null)
                {
                    return NotFound(); // Job with the specified ID was not found
                }

                return Ok(Locations); // Return the found job
            }

            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while processing your request");
            }
        }


        [HttpPost]
        public async Task<IActionResult> AddLocation(AddLocationDto addLocationDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Create a new Location entity with the provided title and other details
            var LocationEntity = new Location
            {
                Title = addLocationDto.Title,
                City = addLocationDto.City,
                Country = addLocationDto.Country,
                State = addLocationDto.State,
                Zip = addLocationDto.Zip,

                // No need to set the ID as it's autogenerated by the database
            };

            dbContext.Locations.Add(LocationEntity);
            await dbContext.SaveChangesAsync();

            return CreatedAtAction(nameof(GetLocationById), new { id = LocationEntity.Id }, LocationEntity);
        }

        [HttpPut("{id}")] //update a exisiting Location feilds  by passing the Location id 

        public async Task<IActionResult> UpdateLocation(int id, UpdateLocationDto UpdateLocationDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var Locations = await dbContext.Locations.FindAsync(id);
            if (Locations == null)
            {
                return NotFound(); // Job with the specified ID was not found
            }


            Locations.Title = UpdateLocationDto.Title;
            Locations.City = UpdateLocationDto.City;
            Locations.Country = UpdateLocationDto.Country;
            Locations.State = UpdateLocationDto.State;
            Locations.Zip = UpdateLocationDto.Zip;


            dbContext.Entry(Locations).State = EntityState.Modified;
            await dbContext.SaveChangesAsync();

            return Ok(); // Return the updated job entity with a 200 OK status code
        }

    }

}

